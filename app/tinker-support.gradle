apply plugin: 'com.tencent.bugly.tinker-support'

def bakPath = file("${buildDir}/baseapk/")

/**
 * 此处填写每次构建生成的基准包目录
 */
def baseApkDir = "app-0412-16-11-27"

/**
 * 对于插件各参数的详细解析请参考
 */
tinkerSupport {

    // 开启tinker-support插件，默认值true
    enable = true

    // 指定归档目录，默认值当前module的子目录tinker
    autoBackupApkDir = "${bakPath}"

    // 自动生成tinkerId, 你无须关注tinkerId，默认为false
    autoGenerateTinkerId = true

    // 是否启用覆盖tinkerPatch配置功能，默认值false
    // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch
    overrideTinkerPatchConfiguration = true

    // 编译补丁包时，必需指定基线版本的apk，默认值为空
    // 如果为空，则表示不是进行补丁包的编译
    // @{link tinkerPatch.oldApk }
    baseApk =  "${bakPath}/${baseApkDir}/app-release.apk"

    // 对应tinker插件applyMapping
    baseApkProguardMapping = "${bakPath}/${baseApkDir}/app-release-mapping.txt"

    // 对应tinker插件applyResourceMapping
    baseApkResourceMapping = "${bakPath}/${baseApkDir}/app-release-R.txt"

    // 构建基准包跟补丁包都要修改tinkerId，主要用于区分,例如:1.0.1base 1.0.1patch
    tinkerId = "1.0.1patch"

    // 打多渠道补丁时指定目录
    buildAllFlavorsDir = "${bakPath}/${baseApkDir}"

    // 是否开启加固模式，默认为false
     isProtectedApp = true

    // 是否采用反射Application的方式集成，无须改造Application
    enableProxyApplication = true
}